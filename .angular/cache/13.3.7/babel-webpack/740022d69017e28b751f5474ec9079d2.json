{"ast":null,"code":"import { Subject, throwError } from \"rxjs\";\nimport { environment } from \"../../../../environments/environment\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.error$ = new Subject();\n    }\n\n    get token() {\n      const expDate = new Date(localStorage.getItem('fb-token-exp'));\n\n      if (new Date() > expDate) {\n        this.logout();\n        return null;\n      }\n\n      return localStorage.getItem('fb-token');\n    }\n\n    login(user) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, user).pipe(tap(this.setToken), catchError(err => this.handleError(err)));\n    }\n\n    logout() {\n      this.setToken(null);\n    }\n\n    isAuthenticated() {\n      return !!this.token;\n    }\n\n    setToken(resp) {\n      if (resp && resp.expiresIn && resp.idToken) {\n        const expDate = new Date(new Date().getTime() + +resp.expiresIn * 1000);\n        localStorage.setItem('fb-token', resp.idToken);\n        localStorage.setItem('fb-token-exp', expDate.toString());\n      } else {\n        localStorage.clear();\n      }\n    }\n\n    handleError(error) {\n      const {\n        message\n      } = error.error.error.errors[0];\n\n      switch (message) {\n        case 'INVALID_EMAIL':\n          this.error$.next('Invalid email');\n          break;\n\n        case 'INVALID_PASSWORD':\n          this.error$.next('Invalid password');\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          this.error$.next('Email not found');\n          break;\n      }\n\n      return throwError(error);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}