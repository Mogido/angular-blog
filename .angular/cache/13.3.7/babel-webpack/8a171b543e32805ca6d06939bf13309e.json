{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../admin/shared/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n\n    intercept(req, next) {\n      if (this.auth.isAuthenticated()) {\n        req = req.clone({\n          setParams: {\n            auth: this.auth.token\n          }\n        });\n      }\n\n      return next.handle(req).pipe(catchError(error => {\n        console.log('[Interceptor error]: ', error);\n\n        if (error.status === 401) {\n          this.auth.logout();\n          this.router.navigate(['/admin', 'login'], {\n            queryParams: {\n              authFailed: true\n            }\n          });\n        }\n\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}